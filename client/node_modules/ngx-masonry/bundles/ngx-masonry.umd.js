(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-masonry', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['ngx-masonry'] = {}, global.ng.core, global.ng.common));
}(this, function (exports, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    var imagesLoaded;
    var masonryConstructor;
    var NgxMasonryComponent = /** @class */ (function () {
        function NgxMasonryComponent(platformId, _element) {
            this.platformId = platformId;
            this._element = _element;
            this.useImagesLoaded = false;
            this.updateLayout = false;
            // Outputs
            this.layoutComplete = new core.EventEmitter();
            this.removeComplete = new core.EventEmitter();
        }
        NgxMasonryComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.useImagesLoaded && imagesLoaded === undefined) {
                imagesLoaded = require('imagesloaded');
            }
            if (common.isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {
                masonryConstructor = require('masonry-layout');
            }
            // Create masonry options object
            if (!this.options) {
                this.options = {};
            }
            // Set default itemSelector
            if (!this.options.itemSelector) {
                this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';
            }
            if (common.isPlatformBrowser(this.platformId)) {
                // Initialize Masonry
                this._msnry = new masonryConstructor(this._element.nativeElement, this.options);
                // Bind to events
                this._msnry.on('layoutComplete', function (items) {
                    _this.layoutComplete.emit(items);
                });
                this._msnry.on('removeComplete', function (items) {
                    _this.removeComplete.emit(items);
                });
            }
        };
        NgxMasonryComponent.prototype.ngOnChanges = function (changes) {
            // only update layout if it's not the first change
            if (changes.updateLayout) {
                if (!changes.updateLayout.firstChange) {
                    this.layout();
                }
            }
        };
        NgxMasonryComponent.prototype.ngOnDestroy = function () {
            if (this._msnry) {
                this._msnry.destroy();
            }
        };
        NgxMasonryComponent.prototype.layout = function () {
            var _this = this;
            setTimeout(function () {
                _this._msnry.layout();
            });
        };
        NgxMasonryComponent.prototype.reloadItems = function () {
            var _this = this;
            setTimeout(function () {
                _this._msnry.reloadItems();
            });
        };
        // public add(element: HTMLElement, prepend: boolean = false) {
        NgxMasonryComponent.prototype.add = function (element) {
            var _this = this;
            var isFirstItem = false;
            // Check if first item
            if (this._msnry.items.length === 0) {
                isFirstItem = true;
            }
            if (this.useImagesLoaded) {
                imagesLoaded(element, function (instance) {
                    _this._element.nativeElement.appendChild(element);
                    // Tell Masonry that a child element has been added
                    _this._msnry.appended(element);
                    // layout if first item
                    if (isFirstItem) {
                        _this.layout();
                    }
                });
                this._element.nativeElement.removeChild(element);
            }
            else {
                // Tell Masonry that a child element has been added
                this._msnry.appended(element);
                // layout if first item
                if (isFirstItem) {
                    this.layout();
                }
            }
        };
        NgxMasonryComponent.prototype.remove = function (element) {
            // Tell Masonry that a child element has been removed
            this._msnry.remove(element);
            // Layout items
            this.layout();
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgxMasonryComponent.prototype, "options", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], NgxMasonryComponent.prototype, "useImagesLoaded", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], NgxMasonryComponent.prototype, "updateLayout", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], NgxMasonryComponent.prototype, "layoutComplete", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], NgxMasonryComponent.prototype, "removeComplete", void 0);
        NgxMasonryComponent = __decorate([
            core.Component({
                selector: '[ngx-masonry], ngx-masonry',
                template: '<ng-content></ng-content>',
                styles: ["\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t"]
            }),
            __param(0, core.Inject(core.PLATFORM_ID)),
            __metadata("design:paramtypes", [Object, core.ElementRef])
        ], NgxMasonryComponent);
        return NgxMasonryComponent;
    }());

    var NgxMasonryDirective = /** @class */ (function () {
        function NgxMasonryDirective(_element, _parent, platformId) {
            this._element = _element;
            this._parent = _parent;
            this.platformId = platformId;
        }
        NgxMasonryDirective.prototype.ngAfterViewInit = function () {
            if (common.isPlatformBrowser(this.platformId)) {
                this._parent.add(this._element.nativeElement);
                this.watchForHtmlChanges();
            }
        };
        NgxMasonryDirective.prototype.ngOnDestroy = function () {
            if (common.isPlatformBrowser(this.platformId)) {
                this._parent.remove(this._element.nativeElement);
            }
        };
        /** When HTML in brick changes dinamically, observe that and change layout */
        NgxMasonryDirective.prototype.watchForHtmlChanges = function () {
            MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
            if (MutationObserver) {
                /** Watch for any changes to subtree */
                var self_1 = this;
                var observer = new MutationObserver(function (mutations, observerFromElement) {
                    self_1._parent.layout();
                });
                // define what element should be observed by the observer
                // and what types of mutations trigger the callback
                observer.observe(this._element.nativeElement, {
                    subtree: true,
                    childList: true
                });
            }
        };
        NgxMasonryDirective = __decorate([
            core.Directive({
                selector: '[ngxMasonryItem], ngxMasonryItem'
            }),
            __param(1, core.Inject(core.forwardRef(function () { return NgxMasonryComponent; }))),
            __param(2, core.Inject(core.PLATFORM_ID)),
            __metadata("design:paramtypes", [core.ElementRef,
                NgxMasonryComponent, Object])
        ], NgxMasonryDirective);
        return NgxMasonryDirective;
    }());

    var NgxMasonryModule = /** @class */ (function () {
        function NgxMasonryModule() {
        }
        NgxMasonryModule = __decorate([
            core.NgModule({
                imports: [],
                declarations: [NgxMasonryComponent, NgxMasonryDirective],
                exports: [NgxMasonryComponent, NgxMasonryDirective]
            })
        ], NgxMasonryModule);
        return NgxMasonryModule;
    }());

    exports.NgxMasonryComponent = NgxMasonryComponent;
    exports.NgxMasonryDirective = NgxMasonryDirective;
    exports.NgxMasonryModule = NgxMasonryModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-masonry.umd.js.map
